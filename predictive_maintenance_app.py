import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

st.set_page_config(
    page_title="Predictive Maintenance Dashboard",
    layout="wide",
    page_icon="üîß",
    initial_sidebar_state="expanded"
)
st.title("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—É–¥–æ–≤")

COMPONENTS = ["–ù–∞—Å–æ—Å—ã", "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏", "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã"]
WARNING_THRESHOLD, CRITICAL_THRESHOLD, FAILURE_THRESHOLD = 0.7, 0.85, 0.95
DAY_LENGTH, SIMULATION_DAYS = 24, 7
np.random.seed(42)

def normalize(x):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"""
    if len(x) == 0:
        return np.array([])
    x_min, x_max = np.min(x), np.max(x)
    if x_max - x_min == 0:
        return np.ones_like(x) * 0.5
    return (x - x_min) / (x_max - x_min + 1e-10)

def compute_risk(vib, temp):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    return 1 / (1 + np.exp(-5*(0.6*vib + 0.4*temp - 0.5)))

def calculate_rul(risk_data, method='linear'):
    """–†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã (RUL) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if len(risk_data) < 10:
        return np.nan, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ RUL", 0.0

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        window_size = min(30, len(risk_data))
        recent_data = risk_data[-window_size:]
        X = np.arange(len(recent_data)).reshape(-1, 1)
        y = np.array(recent_data)

        if method == 'linear':
            model = LinearRegression().fit(X, y)
            slope = model.coef_[0]
        else:
            model = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
            model.fit(X, y)
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            y_pred_current = model.predict([[len(recent_data)-1]])[0]
            y_pred_next = model.predict([[len(recent_data)]])[0]
            slope = y_pred_next - y_pred_current

        if slope <= 1e-10:
            return np.nan, "–¢—Ä–µ–Ω–¥ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–ª–∏ —É–ª—É—á—à–∞—é—â–∏–π—Å—è", 0.0

        current_risk = risk_data[-1]
        if current_risk >= FAILURE_THRESHOLD:
            return 0.0, "‚ùå –û–¢–ö–ê–ó! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", 1.0

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ —Ä–∏—Å–∫ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –ø–æ—Ä–æ–≥–∞ –æ—Ç–∫–∞–∑–∞
        # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—É—é —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é
        time_to_failure = max(0, (FAILURE_THRESHOLD - current_risk) / slope)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ "–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è" –≤ –¥–Ω–∏ (24 –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –¥–µ–Ω—å)
        time_to_failure_days = time_to_failure / 24.0

        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ R¬≤
        y_pred = model.predict(X)
        ss_res = np.sum((y - y_pred) ** 2)
        ss_tot = np.sum((y - np.mean(y)) ** 2)
        r_squared = 1 - (ss_res / (ss_tot + 1e-10))
        confidence = min(0.95, max(0.3, r_squared))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å

        # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if time_to_failure_days <= 0.5:
            message = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ {time_to_failure_days*24:.1f} —á–∞—Å–æ–≤"
        elif time_to_failure_days <= 1:
            message = f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫! –û—Å—Ç–∞–ª–æ—Å—å {time_to_failure_days:.1f} –¥–Ω–µ–π"
        elif time_to_failure_days <= 3:
            message = f"üî∂ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫! –û—Å—Ç–∞–ª–æ—Å—å {time_to_failure_days:.1f} –¥–Ω–µ–π"
        elif time_to_failure_days <= 7:
            message = f"üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫! –û—Å—Ç–∞–ª–æ—Å—å {time_to_failure_days:.1f} –¥–Ω–µ–π"
        else:
            message = f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –±–æ–ª–µ–µ {time_to_failure_days:.1f} –¥–Ω–µ–π"

        return time_to_failure_days, message, confidence

    except Exception as e:
        return np.nan, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}", 0.0

def get_recommendations(risk_data, vibration_data, temperature_data, rul_days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    recs = []

    if not risk_data or len(risk_data) == 0:
        return ["üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]

    current_risk = risk_data[-1]
    current_vib = vibration_data[-1] if vibration_data and len(vibration_data) > 0 else 0
    current_temp = temperature_data[-1] if temperature_data and len(temperature_data) > 0 else 0

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–±—Ä–∞—Ü–∏–∏
    if current_vib > 0.8:
        recs.append("üî¥ –í–´–°–û–ö–ê–Ø –í–ò–ë–†–ê–¶–ò–Ø! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É, –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –∏–∑–Ω–æ—Å –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤")
    elif current_vib > 0.6:
        recs.append("üü† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏")
    elif current_vib > 0.4:
        recs.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    if current_temp > 70:
        recs.append("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –∏ —Å–º–∞–∑–∫—É")
    elif current_temp > 60:
        recs.append("üü† –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ø–ª–æ–æ—Ç–≤–æ–¥ –∏ —Ü–∏—Ä–∫—É–ª—è—Ü–∏—é —Å–º–∞–∑–∫–∏")
    elif current_temp > 55:
        recs.append("üü° –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫—É
    if current_risk >= FAILURE_THRESHOLD:
        recs.append("‚ùå –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    elif current_risk >= CRITICAL_THRESHOLD:
        recs.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    elif current_risk >= WARNING_THRESHOLD:
        recs.append("‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö! –°—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    elif current_risk >= 0.6:
        recs.append("üî∂ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    elif current_risk >= 0.4:
        recs.append("üî∂ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä")
    else:
        recs.append("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ RUL
    if not np.isnan(rul_days):
        if rul_days <= 1:
            recs.append(f"üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø! –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–∞–∑–∞ —á–µ—Ä–µ–∑ {rul_days*24:.1f} —á–∞—Å–æ–≤")
        elif rul_days <= 3:
            recs.append(f"‚ö†Ô∏è –°–†–û–ß–ù–´–ô –†–ï–ú–û–ù–¢! –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–∞–∑–∞ —á–µ—Ä–µ–∑ {rul_days:.1f} –¥–Ω–µ–π")
        elif rul_days <= 7:
            recs.append(f"üî∂ –ü–õ–ê–ù–û–í–´–ô –†–ï–ú–û–ù–¢! –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–∞–∑–∞ —á–µ—Ä–µ–∑ {rul_days:.1f} –¥–Ω–µ–π")
        elif rul_days <= 30:
            recs.append(f"üü¢ –ü–õ–ê–ù–û–í–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï! –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–∞–∑–∞ —á–µ—Ä–µ–∑ {rul_days:.1f} –¥–Ω–µ–π")

    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recs.extend([
        "üìã –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤",
        "üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ç—è–∂–∫—É –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
        "‚õΩ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–º–∞–∑–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–ª–∞"
    ])

    if not np.isnan(rul_days) and rul_days <= 7:
        recs.extend([
            "üõ†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞",
            "üë• –£–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª—É–∂–±—É –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Ä–µ–º–æ–Ω—Ç–µ",
            "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        ])

    return recs

def get_risk_status(risk_value):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–∞"""
    if risk_value >= FAILURE_THRESHOLD:
        return "‚ùå –ê–í–ê–†–ò–ô–ù–´–ô", "red"
    elif risk_value >= CRITICAL_THRESHOLD:
        return "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô", "red"
    elif risk_value >= WARNING_THRESHOLD:
        return "üü† –í–´–°–û–ö–ò–ô", "orange"
    elif risk_value >= 0.5:
        return "üü° –ü–û–í–´–®–ï–ù–ù–´–ô", "yellow"
    else:
        return "üü¢ –ù–û–†–ú–ê–õ–¨–ù–´–ô", "green"

def get_component_status(risk, rul_days):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    if risk >= FAILURE_THRESHOLD:
        return "‚ùå –ê–í–ê–†–ò–ô–ù–´–ô", "red"
    elif risk >= CRITICAL_THRESHOLD:
        return "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô", "red"
    elif risk >= WARNING_THRESHOLD:
        return "üü† –í–´–°–û–ö–ò–ô", "orange"
    elif not np.isnan(rul_days) and rul_days <= 1:
        return "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô RUL", "red"
    elif not np.isnan(rul_days) and rul_days <= 3:
        return "üî∂ –í–´–°–û–ö–ò–ô RUL", "orange"
    elif not np.isnan(rul_days) and rul_days <= 7:
        return "üü° –°–†–ï–î–ù–ò–ô RUL", "yellow"
    else:
        return "üü¢ –ù–û–†–ú–ê–õ–¨–ù–´–ô", "green"

def generate_initial_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)"""
    timestamps = []
    sensor_data = {comp: {"vibration": [], "temperature": []} for comp in COMPONENTS}
    risk_data = {comp: [] for comp in COMPONENTS}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 24 —á–∞—Å–æ–≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for hour in range(24):
        timestamp = datetime.now() - timedelta(hours=23-hour)
        timestamps.append(timestamp)

        for comp in COMPONENTS:
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            vib = 0.3 + 0.1 * np.random.rand() + np.random.normal(0, 0.03)
            temp = 45 + 3 * np.random.rand() + np.random.normal(0, 0.5)

            sensor_data[comp]["vibration"].append(vib)
            sensor_data[comp]["temperature"].append(temp)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
            vib_norm = normalize(sensor_data[comp]["vibration"])[-1] if len(sensor_data[comp]["vibration"]) > 0 else 0.5
            temp_norm = normalize(sensor_data[comp]["temperature"])[-1] if len(sensor_data[comp]["temperature"]) > 0 else 0.5

            risk = compute_risk(vib_norm, temp_norm)
            risk_data[comp].append(risk)

    return timestamps, sensor_data, risk_data

def generate_test_data(days=7, failure_scenario=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    timestamps = []
    sensor_data = {comp: {"vibration": [], "temperature": []} for comp in COMPONENTS}
    risk_data = {comp: [] for comp in COMPONENTS}

    for day in range(days):
        for hour in range(DAY_LENGTH):
            timestamp = datetime.now() - timedelta(days=days-day-1, hours=DAY_LENGTH-hour-1)
            timestamps.append(timestamp)

            for comp in COMPONENTS:
                if failure_scenario:
                    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç–∫–∞–∑–∞–º–∏
                    if comp == "–ù–∞—Å–æ—Å—ã":
                        degradation = 1 + 0.08*day + 0.004*hour
                    elif comp == "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏":
                        degradation = 1 + 0.05*day + 0.002*hour
                    else:
                        degradation = 1 + 0.03*day + 0.001*hour
                else:
                    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                    degradation = 1 + 0.01*day + 0.0005*hour

                vib = 0.3 * degradation + 0.1 * np.random.rand() + np.random.normal(0, 0.05)
                temp = 40 + 8 * degradation + 3 * np.random.rand() + np.random.normal(0, 0.8)

                sensor_data[comp]["vibration"].append(vib)
                sensor_data[comp]["temperature"].append(temp)

                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
                window_size = min(24, len(sensor_data[comp]["vibration"]))
                vib_window = sensor_data[comp]["vibration"][-window_size:]
                temp_window = sensor_data[comp]["temperature"][-window_size:]

                vib_norm = normalize(vib_window)[-1] if len(vib_window) > 0 else 0.5
                temp_norm = normalize(temp_window)[-1] if len(temp_window) > 0 else 0.5

                risk = compute_risk(vib_norm, temp_norm)
                risk_data[comp].append(risk)

    return timestamps, sensor_data, risk_data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'sensor_data' not in st.session_state:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    timestamps, sensor_data, risk_data = generate_initial_data()

    st.session_state.update({
        'sensor_data': sensor_data,
        'risk_data': risk_data,
        'timestamps': timestamps,
        'rul_data': {comp: {"days": np.nan, "confidence": 0.0} for comp in COMPONENTS},
        'maintenance_history': [],
        'alerts': [],
        'data_loaded': True,
        'test_data_loaded': False
    })

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RUL –¥–∞–Ω–Ω—ã—Ö
for comp in COMPONENTS:
    if len(st.session_state.risk_data[comp]) >= 10:
        rul_days, _, confidence = calculate_rul(st.session_state.risk_data[comp])
        st.session_state.rul_data[comp] = {"days": rul_days, "confidence": confidence}

# –°–∞–π–¥–±–∞—Ä —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
st.sidebar.header("üß™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
    timestamps, sensor_data, risk_data = generate_test_data(failure_scenario=False)
    st.session_state.update({
        'sensor_data': sensor_data,
        'risk_data': risk_data,
        'timestamps': timestamps,
        'test_data_loaded': True
    })
    st.rerun()

if st.sidebar.button("üî• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
    timestamps, sensor_data, risk_data = generate_test_data(failure_scenario=True)
    st.session_state.update({
        'sensor_data': sensor_data,
        'risk_data': risk_data,
        'timestamps': timestamps,
        'test_data_loaded': True
    })
    st.rerun()

if st.sidebar.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º", use_container_width=True):
    timestamps, sensor_data, risk_data = generate_initial_data()
    st.session_state.update({
        'sensor_data': sensor_data,
        'risk_data': risk_data,
        'timestamps': timestamps,
        'test_data_loaded': False
    })
    st.rerun()

st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
show_components = st.sidebar.multiselect("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", COMPONENTS, default=COMPONENTS)
risk_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", 0.1, 1.0, WARNING_THRESHOLD, 0.05)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üè† –û–±–∑–æ—Ä", "üìà –ì—Ä–∞—Ñ–∏–∫–∏", "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "üõ†Ô∏è –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"])

with tab1:
    st.header("üè† –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")

    # –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
    if st.session_state.get('test_data_loaded', False):
        st.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        st.info("‚ÑπÔ∏è –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cols = st.columns(4)
    with cols[0]:
        total_risk = np.mean([st.session_state.risk_data[comp][-1] for comp in COMPONENTS])
        delta = total_risk - 0.5 if total_risk > 0.5 else None
        st.metric("–û–±—â–∏–π —Ä–∏—Å–∫ —Å–∏—Å—Ç–µ–º—ã", f"{total_risk:.0%}",
                 delta=f"{delta:+.1%}" if delta else None,
                 delta_color="inverse")

    with cols[1]:
        rul_values = [st.session_state.rul_data[comp]["days"] for comp in COMPONENTS
                     if not np.isnan(st.session_state.rul_data[comp]["days"])]
        avg_rul = np.mean(rul_values) if rul_values else np.nan
        st.metric("–°—Ä–µ–¥–Ω–∏–π RUL", f"{avg_rul:.1f} –¥–Ω–µ–π" if not np.isnan(avg_rul) else "N/A")

    with cols[2]:
        avg_vib = np.mean([st.session_state.sensor_data[comp]["vibration"][-1] for comp in COMPONENTS])
        st.metric("–°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è", f"{avg_vib:.2f} –º–º/—Å")

    with cols[3]:
        avg_temp = np.mean([st.session_state.sensor_data[comp]["temperature"][-1] for comp in COMPONENTS])
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{avg_temp:.1f}¬∞C")

    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    st.subheader("üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    for comp in COMPONENTS:
        risk = st.session_state.risk_data[comp][-1]
        rul_info = st.session_state.rul_data[comp]
        vib = st.session_state.sensor_data[comp]["vibration"][-1]
        temp = st.session_state.sensor_data[comp]["temperature"][-1]

        status_text, status_color = get_component_status(risk, rul_info["days"])
        risk_status, _ = get_risk_status(risk)

        with st.container():
            st.markdown(f"""
            <div style='border-left: 4px solid {status_color}; padding: 10px; margin: 5px 0; background: #f8f9fa; border-radius: 5px;'>
                <h4 style='color: {status_color}; margin: 0;'>{comp} - {status_text}</h4>
                <p style='margin: 5px 0;'>
                    <b>–†–∏—Å–∫:</b> {risk:.0%} ({risk_status}) |
                    <b>RUL:</b> {rul_info['days']:.1f} –¥. |
                    <b>–í–∏–±—Ä:</b> {vib:.2f} –º–º/—Å |
                    <b>–¢–µ–º–ø:</b> {temp:.1f}¬∞C
                </p>
            </div>
            """, unsafe_allow_html=True)

            st.progress(float(risk))

with tab2:
    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

    selected_comp = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç", COMPONENTS, key="graph_component")

    if selected_comp:
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=("–†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞", "–í–∏–±—Ä–∞—Ü–∏—è", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¢—Ä–µ–Ω–¥ RUL"),
            vertical_spacing=0.1
        )

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        risk_data = st.session_state.risk_data[selected_comp]
        vib_data = st.session_state.sensor_data[selected_comp]["vibration"]
        temp_data = st.session_state.sensor_data[selected_comp]["temperature"]

        # –†–∏—Å–∫
        fig.add_trace(go.Scatter(x=st.session_state.timestamps, y=risk_data, name='–†–∏—Å–∫', line=dict(color='red')), 1, 1)

        # –í–∏–±—Ä–∞—Ü–∏—è
        fig.add_trace(go.Scatter(x=st.session_state.timestamps, y=vib_data, name='–í–∏–±—Ä–∞—Ü–∏—è', line=dict(color='blue')), 1, 2)

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        fig.add_trace(go.Scatter(x=st.session_state.timestamps, y=temp_data, name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', line=dict(color='orange')), 2, 1)

        # RUL
        rul_values = []
        for i in range(len(risk_data)):
            if i >= 10 and i % 6 == 0:
                rul_days, _, _ = calculate_rul(risk_data[:i+1])
                rul_values.append(rul_days if not np.isnan(rul_days) else None)
            else:
                rul_values.append(None)

        fig.add_trace(go.Scatter(x=st.session_state.timestamps[:len(rul_values)], y=rul_values,
                               name='RUL', line=dict(color='green')), 2, 2)

        # –ü–æ—Ä–æ–≥–∏
        fig.add_hline(y=WARNING_THRESHOLD, line_dash="dash", line_color="orange", row=1, col=1)
        fig.add_hline(y=CRITICAL_THRESHOLD, line_dash="dash", line_color="red", row=1, col=1)
        fig.add_hline(y=FAILURE_THRESHOLD, line_dash="dash", line_color="black", row=1, col=1)

        fig.update_layout(height=600, showlegend=True, title_text=f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ {selected_comp}")
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é")

    if not st.session_state.data_loaded:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    else:
        for comp in COMPONENTS:
            with st.expander(f"üîß {comp} - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=True):
                risk_data = st.session_state.risk_data[comp]
                vib_data = st.session_state.sensor_data[comp]["vibration"]
                temp_data = st.session_state.sensor_data[comp]["temperature"]
                rul_info = st.session_state.rul_data[comp]

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = get_recommendations(risk_data, vib_data, temp_data, rul_info["days"])

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫", f"{risk_data[-1]:.0%}")
                with col2:
                    st.metric("–í–∏–±—Ä–∞—Ü–∏—è", f"{vib_data[-1]:.2f} –º–º/—Å")
                with col3:
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{temp_data[-1]:.1f}¬∞C")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º RUL –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if not np.isnan(rul_info["days"]):
                    st.info(f"**–ü—Ä–æ–≥–Ω–æ–∑ RUL:** {rul_info['days']:.1f} –¥–Ω–µ–π (–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {rul_info['confidence']:.0%})")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                for i, rec in enumerate(recommendations, 1):
                    if "‚ùå" in rec or "üö®" in rec or "üî¥" in rec:
                        st.error(f"{i}. {rec}")
                    elif "‚ö†Ô∏è" in rec or "üü†" in rec:
                        st.warning(f"{i}. {rec}")
                    elif "üî∂" in rec or "üü°" in rec:
                        st.info(f"{i}. {rec}")
                    else:
                        st.success(f"{i}. {rec}")

with tab4:
    st.header("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    if not st.session_state.data_loaded:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    else:
        selected_component = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", COMPONENTS, key="diagnostics_component")

        if selected_component:
            risk_data = st.session_state.risk_data[selected_component]
            vib_data = st.session_state.sensor_data[selected_component]["vibration"]
            temp_data = st.session_state.sensor_data[selected_component]["temperature"]
            rul_info = st.session_state.rul_data[selected_component]

            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞")

                st.metric("–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫", f"{risk_data[-1]:.0%}")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫", f"{np.max(risk_data):.0%}")
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", f"{np.mean(risk_data):.0%}")

                if not np.isnan(rul_info["days"]):
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑ RUL", f"{rul_info['days']:.1f} –¥–Ω–µ–π")
                    st.progress(min(1.0, rul_info["confidence"]))
                    st.caption(f"–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {rul_info['confidence']:.0%}")

                # –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞
                risk_fig = go.Figure()
                risk_fig.add_trace(go.Scatter(
                    x=st.session_state.timestamps[:len(risk_data)],
                    y=risk_data,
                    name='–†–∏—Å–∫',
                    line=dict(color='red', width=2)
                ))
                risk_fig.add_hline(y=WARNING_THRESHOLD, line_dash="dot", line_color="orange")
                risk_fig.add_hline(y=CRITICAL_THRESHOLD, line_dash="dot", line_color="red")
                risk_fig.add_hline(y=FAILURE_THRESHOLD, line_dash="dot", line_color="black")
                risk_fig.update_layout(height=300, title="–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∏—Å–∫–∞")
                st.plotly_chart(risk_fig, use_container_width=True)

            with col2:
                st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏")

                st.metric("–¢–µ–∫—É—â–∞—è –≤–∏–±—Ä–∞—Ü–∏—è", f"{vib_data[-1]:.2f} –º–º/—Å")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è", f"{np.max(vib_data):.2f} –º–º/—Å")
                st.metric("–°—Ä–µ–¥–Ω—è—è", f"{np.mean(vib_data):.2f} –º–º/—Å")
                st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{np.std(vib_data):.3f} –º–º/—Å")

                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
                hist_fig = go.Figure()
                hist_fig.add_trace(go.Histogram(
                    x=vib_data,
                    name='–í–∏–±—Ä–∞—Ü–∏—è',
                    marker_color='blue',
                    nbinsx=20
                ))
                hist_fig.update_layout(height=300, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏")
                st.plotly_chart(hist_fig, use_container_width=True)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            st.subheader("üå°Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            col3, col4 = st.columns(2)

            with col3:
                st.metric("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{temp_data[-1]:.1f}¬∞C")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è", f"{np.max(temp_data):.1f}¬∞C")
                st.metric("–°—Ä–µ–¥–Ω—è—è", f"{np.mean(temp_data):.1f}¬∞C")

                if len(temp_data) > 1:
                    trend = "‚ÜóÔ∏è –†–∞—Å—Ç–µ—Ç" if temp_data[-1] > temp_data[-2] else "‚ÜòÔ∏è –ü–∞–¥–∞–µ—Ç" if temp_data[-1] < temp_data[-2] else "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞"
                    st.metric("–¢—Ä–µ–Ω–¥", trend)

            with col4:
                if len(risk_data) > 10:
                    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    min_len = min(50, len(risk_data), len(vib_data))
                    correlation = np.corrcoef(risk_data[-min_len:], vib_data[-min_len:])[0, 1]

                    st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–∏—Å–∫-–≤–∏–±—Ä–∞—Ü–∏—è", f"{correlation:.2f}")

                    if correlation > 0.7:
                        st.info("‚úÖ –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
                    elif correlation > 0.3:
                        st.info("üî∂ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
                    else:
                        st.info("üî¥ –°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")

with tab5:
    st.header("üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")

    st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    if st.session_state.maintenance_history:
        maintenance_df = pd.DataFrame(st.session_state.maintenance_history)
        st.dataframe(maintenance_df, use_container_width=True, height=300)
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    st.subheader("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

    with st.form("maintenance_form"):
        col1, col2 = st.columns(2)

        with col1:
            maintenance_component = st.selectbox("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", COMPONENTS, key="maintenance_component")
            maintenance_type = st.selectbox("–¢–∏–ø –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                                          ["–ü–ª–∞–Ω–æ–≤–æ–µ", "–í–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–µ", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ"],
                                          key="maintenance_type")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RUL
            rul_info = st.session_state.rul_data[maintenance_component]
            if not np.isnan(rul_info["days"]):
                suggested_date = datetime.now() + timedelta(days=max(1, min(14, int(rul_info["days"]))))
                st.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–∞—Ç–∞: {suggested_date.strftime('%d.%m.%Y')}")

        with col2:
            planned_date = st.date_input("–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞", datetime.now() + timedelta(days=7))
            maintenance_status = st.selectbox("–°—Ç–∞—Ç—É—Å", ["–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"], key="maintenance_status")
            assigned_technician = st.text_input("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏–∫", "–ò–≤–∞–Ω–æ–≤ –ò.–ò.")

        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", placeholder="–û–ø–∏—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã...")
        required_parts = st.text_input("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏", placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏...")

        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", type="primary")

        if submitted:
            if not description.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç")
            else:
                new_maintenance = {
                    "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": maintenance_component,
                    "–¢–∏–ø": maintenance_type,
                    "–î–∞—Ç–∞": planned_date.strftime("%Y-%m-%d"),
                    "–°—Ç–∞—Ç—É—Å": maintenance_status,
                    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": assigned_technician,
                    "–û–ø–∏—Å–∞–Ω–∏–µ": description,
                    "–ó–∞–ø—á–∞—Å—Ç–∏": required_parts,
                    "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                st.session_state.maintenance_history.append(new_maintenance)
                st.success("‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!")

                alert = {
                    "type": "maintenance_planned",
                    "component": maintenance_component,
                    "timestamp": datetime.now().strftime("%H:%M:%S"),
                    "message": f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ {maintenance_component}"
                }
                st.session_state.alerts.append(alert)
                st.rerun()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if st.session_state.maintenance_history:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

        stats_col1, stats_col2, stats_col3 = st.columns(3)

        status_counts = {"–í—ã–ø–æ–ª–Ω–µ–Ω–æ": 0, "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ": 0, "–û—Ç–º–µ–Ω–µ–Ω–æ": 0}
        for m in st.session_state.maintenance_history:
            status = m.get("–°—Ç–∞—Ç—É—Å", "")
            if status in status_counts:
                status_counts[status] += 1

        with stats_col1:
            st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", status_counts["–í—ã–ø–æ–ª–Ω–µ–Ω–æ"])
        with stats_col2:
            st.metric("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", status_counts["–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"])
        with stats_col3:
            st.metric("–û—Ç–º–µ–Ω–µ–Ω–æ", status_counts["–û—Ç–º–µ–Ω–µ–Ω–æ"])

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        maintenance_by_component = {}
        for maintenance in st.session_state.maintenance_history:
            comp = maintenance["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"]
            maintenance_by_component[comp] = maintenance_by_component.get(comp, 0) + 1

        if maintenance_by_component:
            maintenance_fig = go.Figure()
            maintenance_fig.add_trace(go.Bar(
                x=list(maintenance_by_component.keys()),
                y=list(maintenance_by_component.values()),
                marker_color=['#1f77b4', '#ff7f0e', '#2ca02c']
            ))
            maintenance_fig.update_layout(
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–π –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º",
                height=300
            )
            st.plotly_chart(maintenance_fig, use_container_width=True)

# –û–ø–æ–≤–µ—â–µ–Ω–∏—è
if st.session_state.data_loaded:
    for comp in COMPONENTS:
        risk = st.session_state.risk_data[comp][-1]
        rul_info = st.session_state.rul_data[comp]

        if risk > risk_threshold or (not np.isnan(rul_info["days"]) and rul_info["days"] <= 3):
            alert_msg = f"{comp}: —Ä–∏—Å–∫ {risk:.0%}, RUL {rul_info['days']:.1f}–¥"

            if not any(a.get("component") == comp for a in st.session_state.alerts[-3:]):
                st.session_state.alerts.append({
                    "component": comp,
                    "timestamp": datetime.now().strftime("%H:%M:%S"),
                    "message": alert_msg
                })

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
if st.session_state.alerts:
    st.sidebar.header("üö® –û–ø–æ–≤–µ—â–µ–Ω–∏—è")
    for alert in st.session_state.alerts[-3:]:
        st.sidebar.warning(f"{alert['timestamp']} - {alert['message']}")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
if len(st.session_state.alerts) > 20:
    st.session_state.alerts = st.session_state.alerts[-20:]

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .stMetric {
        padding: 10px;
        border-radius: 8px;
        background: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stProgress > div > div {
        height: 15px;
        border-radius: 8px;
    }
</style>
""", unsafe_allow_html=True)
