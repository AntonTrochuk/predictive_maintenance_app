import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta

# ------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Predictive Maintenance Dashboard",
    layout="wide",
    page_icon="üîß"
)
st.title("üîß –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: Live Dashboard")

# ------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
COMPONENTS = ["–ù–∞—Å–æ—Å—ã", "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏", "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã"]
WARNING_THRESHOLD = 0.7
CRITICAL_THRESHOLD = 0.95  # –Ω–æ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥
DAY_LENGTH = 24  # —á–∞—Å—ã
SIMULATION_DAYS = 7  # –¥–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
np.random.seed(42)

COLORS = {
    "–ù–∞—Å–æ—Å—ã": "blue",
    "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏": "orange",
    "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã": "green"
}

# ------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def normalize(x):
    return (x - np.min(x)) / (np.max(x) - np.min(x) + 0.001)

def compute_risk(vib, temp):
    risk_raw = 0.6*vib + 0.4*temp
    return 1 / (1 + np.exp(-5*(risk_raw - 0.5)))

def predict_days_to_maintenance(risk_arr):
    if len(risk_arr) == 0:
        return np.nan
    window_size = min(5, len(risk_arr))
    growth_rate = np.mean(np.diff(risk_arr[-window_size:])) if window_size > 1 else 0.01
    if growth_rate <= 0:
        return np.nan
    days = (CRITICAL_THRESHOLD - risk_arr[-1]) / growth_rate
    return max(0, int(np.ceil(days)))

def get_recommendations(risk, vib, temp):
    recs = []
    if vib[-1] > 0.6:
        recs.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∏ –∫—Ä–µ–ø–ª–µ–Ω–∏—è")
    if temp[-1] > 55:
        recs.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –∏ —Å–º–∞–∑–∫—É")
    if risk[-1] >= WARNING_THRESHOLD:
        recs.append("‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    elif risk[-1] > 0.5:
        recs.append("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    else:
        recs.append("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    return recs

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if 'sensor_data' not in st.session_state:
    st.session_state.sensor_data = {comp: {"vibration": [], "temperature": []} for comp in COMPONENTS}
    st.session_state.risk_data = {comp: [] for comp in COMPONENTS}
    st.session_state.timestamps = []

    for day in range(SIMULATION_DAYS):
        for hour in range(DAY_LENGTH):
            timestamp = datetime.now() - timedelta(days=SIMULATION_DAYS-day-1, hours=DAY_LENGTH-hour-1)
            st.session_state.timestamps.append(timestamp)

            for comp in COMPONENTS:
                degradation = 1 + 0.02*day
                new_vib = 0.5*degradation + 0.05*np.random.rand() + np.random.normal(0, 0.1)
                new_temp = 50*degradation + 0.02*np.random.rand() + np.random.normal(0, 0.2)

                st.session_state.sensor_data[comp]["vibration"].append(new_vib)
                st.session_state.sensor_data[comp]["temperature"].append(new_temp)

                vib_norm = normalize(st.session_state.sensor_data[comp]["vibration"])
                temp_norm = normalize(st.session_state.sensor_data[comp]["temperature"])
                risk = compute_risk(vib_norm[-1], temp_norm[-1])
                st.session_state.risk_data[comp].append(risk)

# ------------------------------
# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
show_components = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    COMPONENTS,
    default=COMPONENTS
)

# ------------------------------
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
st.sidebar.header("üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
cols = st.sidebar.columns(2)
for i, comp in enumerate(COMPONENTS):
    risk = st.session_state.risk_data[comp][-1]
    color = "green" if risk < 0.4 else "orange" if risk < 0.7 else "red"

    cols[i%2].metric(
        label=f"{comp}",
        value=f"{risk:.0%}",
        delta_color="off",
        help=f"–í–∏–±—Ä–∞—Ü–∏—è: {st.session_state.sensor_data[comp]['vibration'][-1]:.2f}\n"
             f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {st.session_state.sensor_data[comp]['temperature'][-1]:.2f}"
    )
    cols[i%2].progress(risk)

# ------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
tab1, tab2 = st.tabs(["üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])

with tab1:
    fig = make_subplots(
        rows=3, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.1,
        subplot_titles=("–†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞", "–í–∏–±—Ä–∞—Ü–∏—è", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    )

    for comp in show_components:
        # –†–∏—Å–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
        fig.add_trace(go.Scatter(
            x=st.session_state.timestamps,
            y=st.session_state.risk_data[comp],
            mode='lines+markers',
            name=f"–†–∏—Å–∫ {comp}",
            line=dict(color=COLORS.get(comp, "gray"), width=2)
        ), row=1, col=1)

        # –í–∏–±—Ä–∞—Ü–∏—è
        fig.add_trace(go.Scatter(
            x=st.session_state.timestamps,
            y=st.session_state.sensor_data[comp]["vibration"],
            mode='lines',
            name=f"–í–∏–±—Ä–∞—Ü–∏—è {comp}"
        ), row=2, col=1)

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        fig.add_trace(go.Scatter(
            x=st.session_state.timestamps,
            y=st.session_state.sensor_data[comp]["temperature"],
            mode='lines',
            name=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {comp}"
        ), row=3, col=1)

    fig.add_hline(y=WARNING_THRESHOLD, line_dash="dot", line_color="red", row=1, col=1)
    fig.add_hline(y=0.6, line_dash="dot", line_color="orange", row=2, col=1)
    fig.add_hline(y=55, line_dash="dot", line_color="orange", row=3, col=1)

    fig.update_layout(
        height=800,
        title_text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        hovermode="x unified"
    )
    fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=3, col=1)
    fig.update_yaxes(title_text="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", row=1, col=1)
    fig.update_yaxes(title_text="–í–∏–±—Ä–∞—Ü–∏—è (–º–º/—Å)", row=2, col=1)
    fig.update_yaxes(title_text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", row=3, col=1)

    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é")

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        for comp in show_components:
            with st.expander(f"üîß {comp}", expanded=True):
                days_to_maintenance = predict_days_to_maintenance(st.session_state.risk_data[comp])
                recs = get_recommendations(
                    st.session_state.risk_data[comp],
                    st.session_state.sensor_data[comp]["vibration"],
                    st.session_state.sensor_data[comp]["temperature"]
                )

                col1, col2 = st.columns(2)
                risk = st.session_state.risk_data[comp][-1]

                col1.metric(
                    "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞",
                    f"{risk:.0%}",
                    delta=f"{risk - st.session_state.risk_data[comp][-2]:+.1%}" if len(st.session_state.risk_data[comp]) > 1 else "N/A"
                )

                if not np.isnan(days_to_maintenance):
                    col2.metric(
                        "–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                        f"{days_to_maintenance} –¥–Ω–µ–π",
                        delta=None,
                        help="–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞"
                    )

                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                for rec in recs:
                    st.markdown(f"- {rec}")

                st.markdown("---")
